// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TescoWineShopSql;

namespace TescoWineShopSqlcore.Migrations
{
    [DbContext(typeof(WineContext))]
    partial class WineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TescoWineShopSql.AccountClass", b =>
                {
                    b.Property<int>("AccountClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AccountClassId");

                    b.ToTable("AccountClasses");

                    b.HasData(
                        new
                        {
                            AccountClassId = 1,
                            IsSystemAccount = false,
                            Name = "Asset"
                        },
                        new
                        {
                            AccountClassId = 2,
                            IsSystemAccount = false,
                            Name = "Expense"
                        },
                        new
                        {
                            AccountClassId = 3,
                            IsSystemAccount = false,
                            Name = "Revenue"
                        },
                        new
                        {
                            AccountClassId = 4,
                            IsSystemAccount = false,
                            Name = "Liabilities"
                        },
                        new
                        {
                            AccountClassId = 5,
                            IsSystemAccount = false,
                            Name = "Equity"
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.AccountGroup", b =>
                {
                    b.Property<int>("AccountGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountClassId")
                        .HasColumnType("int");

                    b.Property<string>("AccountGroupName")
                        .HasColumnType("text");

                    b.HasKey("AccountGroupId");

                    b.ToTable("AccountGroups");

                    b.HasData(
                        new
                        {
                            AccountGroupId = 1,
                            AccountClassId = 1,
                            AccountGroupName = "FixedAsset"
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.Administration", b =>
                {
                    b.Property<int>("Administrationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("Administrationid");

                    b.ToTable("Administration");

                    b.HasData(
                        new
                        {
                            Administrationid = 1,
                            Key = "TaxRate",
                            value = "13"
                        },
                        new
                        {
                            Administrationid = 2,
                            Key = "ServiceCharge",
                            value = "10"
                        },
                        new
                        {
                            Administrationid = 3,
                            Key = "ImageFolder",
                            value = "/home/ec2-user/.local/share\\WineShop\\Images"
                        },
                        new
                        {
                            Administrationid = 4,
                            Key = "DocumentFolder",
                            value = "/home/ec2-user/.local/share\\WineShop\\Documents"
                        },
                        new
                        {
                            Administrationid = 5,
                            Key = "Tables",
                            value = "50"
                        },
                        new
                        {
                            Administrationid = 6,
                            Key = "JsonFolder",
                            value = "/home/ec2-user/.local/share\\WineShop\\Json"
                        },
                        new
                        {
                            Administrationid = 7,
                            Key = "VatEnabled",
                            value = "0"
                        },
                        new
                        {
                            Administrationid = 8,
                            Key = "Vat",
                            value = "13"
                        },
                        new
                        {
                            Administrationid = 9,
                            Key = "FiscalYear",
                            value = "2075/2076"
                        },
                        new
                        {
                            Administrationid = 10,
                            Key = "DiscountStyle",
                            value = "Percent"
                        },
                        new
                        {
                            Administrationid = 11,
                            Key = "AutomateLedgerPost",
                            value = "1"
                        },
                        new
                        {
                            Administrationid = 12,
                            Key = "UseBarCode",
                            value = "0"
                        },
                        new
                        {
                            Administrationid = 13,
                            Key = "Currency",
                            value = "1"
                        },
                        new
                        {
                            Administrationid = 14,
                            Key = "BarCodeFolder",
                            value = "/home/ec2-user/.local/share\\WineShop\\BarCode"
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.Beverage", b =>
                {
                    b.Property<int>("BeverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeverageCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int?>("DrinkType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("ShowInChart")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("BeverageId");

                    b.HasIndex("BeverageCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Beverage");
                });

            modelBuilder.Entity("TescoWineShopSql.BeverageCategory", b =>
                {
                    b.Property<int>("BeverageCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BeverageCategoryName")
                        .HasColumnType("text");

                    b.HasKey("BeverageCategoryId");

                    b.ToTable("BeverageCategory");

                    b.HasData(
                        new
                        {
                            BeverageCategoryId = 1,
                            BeverageCategoryName = "Whisky"
                        },
                        new
                        {
                            BeverageCategoryId = 2,
                            BeverageCategoryName = "Wine"
                        },
                        new
                        {
                            BeverageCategoryId = 3,
                            BeverageCategoryName = "Beer"
                        },
                        new
                        {
                            BeverageCategoryId = 4,
                            BeverageCategoryName = "Soft Drink"
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("text");

                    b.Property<string>("CompanyCity")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyPanNumber")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPassword")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("text");

                    b.Property<string>("CompanyType")
                        .HasColumnType("text");

                    b.Property<int?>("FiscalYearId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CompanyId");

                    b.HasIndex("FiscalYearId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyAddress = "Reliable Colony, Bhainsepati",
                            CompanyCity = "Lalitpur",
                            CompanyName = "Tesco Wine Store",
                            CompanyPanNumber = "12345",
                            CompanyPhone = "12345",
                            IsActive = false
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TescoWineShopSql.DuePay", b =>
                {
                    b.Property<int>("DuePayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("int");

                    b.HasKey("DuePayId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("DuePay");
                });

            modelBuilder.Entity("TescoWineShopSql.FiscalYear", b =>
                {
                    b.Property<int>("FiscalYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FiscalYearDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("FiscalYearId");

                    b.ToTable("FiscalYear");
                });

            modelBuilder.Entity("TescoWineShopSql.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Due")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerAccount", b =>
                {
                    b.Property<int>("LedgerAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountClassId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemLedger")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ParentLedgerAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInChart")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("LedgerAccountId");

                    b.HasIndex("AccountClassId");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentLedgerAccountId");

                    b.ToTable("LedgerAccount");

                    b.HasData(
                        new
                        {
                            LedgerAccountId = 1,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "Cash",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 2,
                            AccountClassId = 3,
                            AccountGroupId = 1,
                            AccountName = "Sales",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 3,
                            AccountClassId = 2,
                            AccountGroupId = 1,
                            AccountName = "Purchase",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 4,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "Debitors",
                            CompanyId = 1,
                            IsSystemLedger = false,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 5,
                            AccountClassId = 4,
                            AccountGroupId = 1,
                            AccountName = "Creditors",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 6,
                            AccountClassId = 4,
                            AccountGroupId = 1,
                            AccountName = "Tesco Suppliers",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ParentLedgerAccountId = 5,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 7,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "Bank",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 8,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "Tesco Bank",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ParentLedgerAccountId = 7,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 9,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "Accounts Receivable",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 10,
                            AccountClassId = 4,
                            AccountGroupId = 1,
                            AccountName = "Accounts Payable",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 11,
                            AccountClassId = 2,
                            AccountGroupId = 1,
                            AccountName = "Salaries",
                            CompanyId = 1,
                            IsSystemLedger = false,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 12,
                            AccountClassId = 2,
                            AccountGroupId = 1,
                            AccountName = "Rent Expense",
                            CompanyId = 1,
                            IsSystemLedger = false,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 13,
                            AccountClassId = 2,
                            AccountGroupId = 1,
                            AccountName = "Advertising Expenses",
                            CompanyId = 1,
                            IsSystemLedger = false,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 14,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "FixedAsset",
                            CompanyId = 1,
                            IsSystemLedger = false,
                            ShowInChart = true,
                            SortOrder = 0
                        },
                        new
                        {
                            LedgerAccountId = 15,
                            AccountClassId = 1,
                            AccountGroupId = 1,
                            AccountName = "Ram",
                            CompanyId = 1,
                            IsSystemLedger = true,
                            ParentLedgerAccountId = 4,
                            ShowInChart = true,
                            SortOrder = 0
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerAccountBalance", b =>
                {
                    b.Property<int>("LedgerAccountBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BeginingBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodYear")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo10")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo11")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo12")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo8")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Saldo9")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("LedgerAccountBalanceId");

                    b.HasIndex("LedgerAccountId");

                    b.ToTable("LedgerAccountBalance");
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerGeneral", b =>
                {
                    b.Property<int>("LedgergeneralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("ClosingBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("JournalEntryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("LedgergeneralId");

                    b.HasIndex("LedgerAccountId");

                    b.HasIndex("LedgerTransactionId");

                    b.ToTable("Ledgergenerals");
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerTransaction", b =>
                {
                    b.Property<int>("LedgerTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FiscalYearId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LedgerTransactionId");

                    b.HasIndex("FiscalYearId");

                    b.HasIndex("UserId");

                    b.ToTable("LedgerTransaction");
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerTransactionDetail", b =>
                {
                    b.Property<int>("LedgerTransactionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Seq")
                        .HasColumnType("text");

                    b.HasKey("LedgerTransactionDetailId");

                    b.HasIndex("LedgerAccountId");

                    b.HasIndex("LedgerTransactionId");

                    b.ToTable("LedgerTransactionDetail");
                });

            modelBuilder.Entity("TescoWineShopSql.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeverageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("LineTotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Metric")
                        .HasColumnType("int");

                    b.Property<int>("MetricQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PurchaseId");

                    b.HasIndex("BeverageId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("TescoWineShopSql.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeverageId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Due")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("DuePaying")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SaleOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("SaleId");

                    b.HasIndex("BeverageId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("TescoWineShopSql.SaleOrder", b =>
                {
                    b.Property<int>("SaleOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AmountAfterDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Due")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("SaleOrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("SaleOrder");
                });

            modelBuilder.Entity("TescoWineShopSql.SalesReturn", b =>
                {
                    b.Property<int>("SalesReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BeverageId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("SalesReturnId");

                    b.HasIndex("BeverageId");

                    b.ToTable("SalesReturn");
                });

            modelBuilder.Entity("TescoWineShopSql.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PanNumber")
                        .HasColumnType("text");

                    b.Property<string>("SupplierAddress")
                        .HasColumnType("text");

                    b.Property<string>("SupplierCity")
                        .HasColumnType("text");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text");

                    b.Property<string>("SupplierPhone")
                        .HasColumnType("text");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("TescoWineShopSql.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Menus")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserAddress")
                        .HasColumnType("text");

                    b.Property<string>("UserCity")
                        .HasColumnType("text");

                    b.Property<DateTime>("UserCreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserPhone")
                        .HasColumnType("text");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserTole")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "dMRo3oqVLOs=",
                            UserAddress = "Dathu Sadak",
                            UserCity = "Kathmandu",
                            UserCreatedOn = new DateTime(2021, 1, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            UserEmail = "dangolevan@gmail.com",
                            UserName = "admin",
                            UserPhone = "9849178036",
                            UserRoleId = 2,
                            UserTole = "Khusibu"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "R2LOIQb+UyM=",
                            UserAddress = "Dathu Sadak",
                            UserCity = "Kathmandu",
                            UserCreatedOn = new DateTime(2021, 1, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            UserEmail = "ram@gmail.com",
                            UserName = "a",
                            UserPhone = "9849178036",
                            UserRoleId = 2,
                            UserTole = "Khusibu"
                        },
                        new
                        {
                            UserId = 3,
                            Password = "R2LOIQb+UyM=",
                            UserAddress = "Dathu Sadak",
                            UserCity = "Kathmandu",
                            UserCreatedOn = new DateTime(2021, 1, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            UserEmail = "dangolevan@gmail.com",
                            UserName = "b",
                            UserPhone = "9849178036",
                            UserRoleId = 3,
                            UserTole = "Khusibu"
                        },
                        new
                        {
                            UserId = 4,
                            Password = "R2LOIQb+UyM=",
                            UserAddress = "Dathu Sadak",
                            UserCity = "Kathmandu",
                            UserCreatedOn = new DateTime(2021, 1, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            UserEmail = "dangolevan@gmail.com",
                            UserName = "c",
                            UserPhone = "9849178036",
                            UserRoleId = 4,
                            UserTole = "Khusibu"
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UserInRole")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            UserInRole = 0
                        },
                        new
                        {
                            UserRoleId = 2,
                            UserInRole = 1
                        },
                        new
                        {
                            UserRoleId = 3,
                            UserInRole = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            UserInRole = 4
                        },
                        new
                        {
                            UserRoleId = 5,
                            UserInRole = 9
                        },
                        new
                        {
                            UserRoleId = 6,
                            UserInRole = 6
                        },
                        new
                        {
                            UserRoleId = 7,
                            UserInRole = 8
                        },
                        new
                        {
                            UserRoleId = 8,
                            UserInRole = 2
                        },
                        new
                        {
                            UserRoleId = 9,
                            UserInRole = 7
                        },
                        new
                        {
                            UserRoleId = 10,
                            UserInRole = 5
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.Vat", b =>
                {
                    b.Property<int>("VatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("VatId");

                    b.ToTable("Vat");

                    b.HasData(
                        new
                        {
                            VatId = 1,
                            VatAmount = 13m
                        });
                });

            modelBuilder.Entity("TescoWineShopSql.Beverage", b =>
                {
                    b.HasOne("TescoWineShopSql.BeverageCategory", "BeverageCategory")
                        .WithMany("Beverages")
                        .HasForeignKey("BeverageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TescoWineShopSql.Company", b =>
                {
                    b.HasOne("TescoWineShopSql.FiscalYear", "FiscalYear")
                        .WithMany()
                        .HasForeignKey("FiscalYearId");
                });

            modelBuilder.Entity("TescoWineShopSql.DuePay", b =>
                {
                    b.HasOne("TescoWineShopSql.Customer", null)
                        .WithMany("Dues")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TescoWineShopSql.Sale", null)
                        .WithMany("DuePays")
                        .HasForeignKey("SaleId");

                    b.HasOne("TescoWineShopSql.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TescoWineShopSql.Invoice", b =>
                {
                    b.HasOne("TescoWineShopSql.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerAccount", b =>
                {
                    b.HasOne("TescoWineShopSql.AccountClass", "AccountClass")
                        .WithMany("LedgerAccounts")
                        .HasForeignKey("AccountClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.AccountGroup", null)
                        .WithMany("LedgerAccounts")
                        .HasForeignKey("AccountGroupId");

                    b.HasOne("TescoWineShopSql.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.LedgerAccount", "parentLedgerAccount")
                        .WithMany()
                        .HasForeignKey("ParentLedgerAccountId");
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerAccountBalance", b =>
                {
                    b.HasOne("TescoWineShopSql.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerGeneral", b =>
                {
                    b.HasOne("TescoWineShopSql.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.LedgerTransaction", "LedgerTransaction")
                        .WithMany("LedgerGenerals")
                        .HasForeignKey("LedgerTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerTransaction", b =>
                {
                    b.HasOne("TescoWineShopSql.FiscalYear", "FiscalYear")
                        .WithMany("LedgerTransactions")
                        .HasForeignKey("FiscalYearId");

                    b.HasOne("TescoWineShopSql.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TescoWineShopSql.LedgerTransactionDetail", b =>
                {
                    b.HasOne("TescoWineShopSql.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.LedgerTransaction", "LedgerTransaction")
                        .WithMany("LedgerTransactionDetails")
                        .HasForeignKey("LedgerTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TescoWineShopSql.Purchase", b =>
                {
                    b.HasOne("TescoWineShopSql.Beverage", "Beverage")
                        .WithMany("Purchases")
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.Invoice", "Invoice")
                        .WithMany("Purchases")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.Supplier", null)
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("TescoWineShopSql.Sale", b =>
                {
                    b.HasOne("TescoWineShopSql.Beverage", "Beverage")
                        .WithMany("Sales")
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TescoWineShopSql.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TescoWineShopSql.SaleOrder", "SaleOrder")
                        .WithMany("Sales")
                        .HasForeignKey("SaleOrderId");
                });

            modelBuilder.Entity("TescoWineShopSql.SaleOrder", b =>
                {
                    b.HasOne("TescoWineShopSql.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TescoWineShopSql.SalesReturn", b =>
                {
                    b.HasOne("TescoWineShopSql.Beverage", "Beverage")
                        .WithMany()
                        .HasForeignKey("BeverageId");
                });

            modelBuilder.Entity("TescoWineShopSql.User", b =>
                {
                    b.HasOne("TescoWineShopSql.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
